apply plugin: 'com.android.application'

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        compileSdkVersion rootProject.ext.compileSdkVersion
        versionName computeVersionName()
        buildConfigField "us.wmwm.happyschedule.service.Poller", "POLLER", "null"
        buildConfigField "boolean","IS_AMAZON_ADS_ENABLED","false"
        buildConfigField "boolean","IS_GOOGLE_ADS_ENABLED","false"
        buildConfigField "String","DEFAULT_DEPARTURE_VISION_ID","\"\""
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    flavorDimensions "brand", "version", "env"

    productFlavors {

        metroNorth {
            flavorDimension "brand"
            applicationId "com.metro.north"
            buildConfigField "us.wmwm.happyschedule.service.Poller", "POLLER", "new us.wmwm.happyschedule.metronorthrails.service.MetroNorthPoller()"
            buildConfigField "boolean","IS_AMAZON_ADS_ENABLED","false"
            buildConfigField "boolean","IS_GOOGLE_ADS_ENABLED","true"
        }
        lirr {
            flavorDimension "brand"
            applicationId "com.lirr"
            buildConfigField "us.wmwm.happyschedule.service.Poller", "POLLER", "new us.wmwm.happyschedule.lirails.service.LirrPoller()"
            buildConfigField "boolean","IS_AMAZON_ADS_ENABLED","false"
            buildConfigField "boolean","IS_GOOGLE_ADS_ENABLED","true"
        }
        njrails {
            flavorDimension "brand"
            applicationId "us.wmwm.njrail"
            buildConfigField "us.wmwm.happyschedule.service.Poller", "POLLER", "new us.wmwm.happyschedule.service.DeparturePoller()"
            buildConfigField "boolean","IS_AMAZON_ADS_ENABLED","true"
            buildConfigField "boolean","IS_GOOGLE_ADS_ENABLED","false"
            buildConfigField "String","DEFAULT_DEPARTURE_VISION_ID","\"105\""

        }
        preIcs {
            flavorDimension "version"
            versionCode computeVersionCode() - 2
            minSdkVersion 9
            targetSdkVersion 13
            compileSdkVersion 13
        }

        postIcs {
            flavorDimension "version"
            versionCode computeVersionCode()
            minSdkVersion 14
            targetSdkVersion rootProject.ext.targetSdkVersion
            compileSdkVersion rootProject.ext.targetSdkVersion
        }

        tv {
            flavorDimension "version"
            versionCode computeVersionCode()
            minSdkVersion 17
            targetSdkVersion rootProject.ext.targetSdkVersion
            compileSdkVersion rootProject.ext.targetSdkVersion
        }

        dev {
            flavorDimension "env"
            versionCode 2014122302
        }

        prod {
            flavorDimension "env"
        }

    }

    sourceSets {
        tv.setRoot("src/tv")
    }

    signingConfigs {
        release {
            storeFile file(project.RAILS_KEYSTORE)
            storePassword project.RAILS_KEYSTORE_PASSWORD
            keyAlias project.RAILS_KEYSTORE_ALIAS
            keyPassword project.RAILS_KEY_PASS
        }
        debug {
            storeFile file(project.RAILS_KEYSTORE)
            storePassword project.RAILS_KEYSTORE_PASSWORD
            keyAlias project.RAILS_KEYSTORE_ALIAS
            keyPassword project.RAILS_KEY_PASS
        }


    }
    buildTypes {
        release {
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile "proguard-project.txt"
            minifyEnabled true
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }


    }
}

def computeVersionCode() {
    def now = Calendar.getInstance()
    def dateFormat = new java.text.SimpleDateFormat("yyyyMMddkk");
    return 1 + Integer.parseInt(dateFormat.format(now.getTime()))
}

def computeVersionName() {
    def now = Calendar.getInstance()
    def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
    return dateFormat.format(now.getTime())
}

def splitDatabase(variant) {



    println("${buildDir.absolutePath}/intermediates/res/${variant.dirName}/raw")
    def baseZip = file("${buildDir.absolutePath}/intermediates/res/${variant.dirName}/raw")
    println("${baseZip.absolutePath}/database_db.zip")
    def zipFile = file("${baseZip.absolutePath}/database_db.zip")
    println("${baseZip.absolutePath}/")
    def outputDir = file("${baseZip.absolutePath}/")
    copy {

        from zipTree(zipFile.absolutePath)
        into outputDir
    }

    delete {
        delete zipFile.absolutePath
    }

            {
                def proc = "split -a 3 -b 125k ${outputDir.absolutePath}/database_db ${outputDir.absolutePath}/database_db_".execute()
                proc.waitFor()
            }

    delete {
        delete "${outputDir.absolutePath}/database_db"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':libraries:AndroidTimesSquareLib:library')
    compile project(':libraries:MicrowaveTimePickerLib:lib')
    compile project(':libraries:JumperLib')
    compile 'com.google.android.gms:play-services-ads:6.5.87'
    compile 'com.google.android.gms:play-services-maps:6.5.87'
    compile 'com.google.android.gms:play-services-plus:6.5.87'
    compile project(':libraries:facebook:facebook')
    compile 'com.android.support:gridlayout-v7:21.0.0'
    compile project(':libraries:android-support-v4-preferencefragmentlib')
    compile project(':libraries:ViewPagerIndicator:library')
    compile project(':libraries:FloatingActionButton:library')
    compile project(':libraries:happyschedule-views')
    compile project(':libraries:StickyListHeadersLib:library')
    tvCompile 'com.android.support:leanback-v17:21.0.0'
}

//android.applicationVariants.all { variant ->
//    variant.mergeResources.doLast {
//        if(variant.getMergedFlavor().getTargetSdkVersion().getApiLevel()>13) {
//            println("not of pre version")
//        } else {
//            println("of version : " + variant.getMergedFlavor().getTargetSdkVersion().getApiLevel())
//            splitDatabase(variant);
//        }
//    }
//}

